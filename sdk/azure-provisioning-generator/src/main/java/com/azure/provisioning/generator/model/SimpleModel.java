package com.azure.provisioning.generator.model;

import com.azure.provisioning.generator.utils.IndentWriter;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Set;
import java.util.stream.Collectors;

public class SimpleModel extends TypeModel {
    public SimpleModel(Specification spec, Class<?> armType, String name, String ns, String description) {
        super(spec, armType, name, ns, description);
    }

    @Override
    public String toString() {
        return "<Model " + getProvisioningPackage() + "." + getName() + ">";
    }

    @Override
    public void generate() {
        try {
                IndentWriter writer = new IndentWriter();
                writer.writeLine("// Copyright (c) Microsoft Corporation. All rights reserved.");
                writer.writeLine("// Licensed under the MIT License.");
                writer.writeLine();
                writer.writeLine("// <auto-generated/>");
                writer.writeLine();

                IndentWriter.Fenceposter fence = new IndentWriter.Fenceposter();
                Set<String> namespaces = collectNamespaces();
                if (isFromExpression()) {
                    namespaces.add("com.azure.provisioning.expressions");
                    namespaces.add("java.beans");
                }
                for (String ns : namespaces.stream().sorted().collect(Collectors.toList())) {
                    if (fence.requiresSeparator()) {
                        // Don't write anything here
                    }
                    writer.writeLine("import " + ns + ";");
                }
                if (fence.requiresSeparator()) {
                    writer.writeLine();
                }

                writer.writeLine("package " + getProvisioningPackage() + ";");
                writer.writeLine();
                writer.writeLine("/**");
                writer.writeWrapped(getDescription() != null ? getDescription() : getName() + ".");
                writer.writeLine(" */");
                writer.writeLine("public class " + getName() + " extends " + (getBaseType() != null ? getBaseType().getName() : "ProvisioningConstruct") + " {");
                writer.indent();
                fence = new IndentWriter.Fenceposter();

                // Write the properties
                for (Property property : getProperties()) {
                    // Property generation logic
                }

                writer.unindent();
                writer.writeLine("}");
                saveFile(writer.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void saveFile(String content) {
        Path path = Paths.get("Models", getName() + ".java");
        try {
            Files.createDirectories(path.getParent());
            Files.write(path, content.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}